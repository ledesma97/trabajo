package Lenguajes_y_Automatas;

import java.io.*;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JOptionPane;

public class Analizador
{
	int renglon=1, columna=0;//Para se√±alar donde fue el error
	ArrayList<Token> tokenAnalizados;//Guardo los token analizados
	public Analizador(String nom) {//Recibe el nombre del archivo de texto
		procesoAnalisis(nom);
	}
	public static void main(String[]args) {
		Analizador a = new Analizador("C:\\Users\\jemmy\\eclipse-workspace\\Aut\\src\\Lenguajes_y_Automatas\\Prueba.txt");
	}
	public void procesoAnalisis(String nom) {
		String linea="", aux="";//Una es para sacar el renglon y el otro es para saber que palabra es
		StringTokenizer tokenizer;//Para cortar las palabras y poder analizarlas
		try{
	          FileReader file = new FileReader(nom);//Aqui abro el flujo del archivo
	          BufferedReader archivoEntrada = new BufferedReader(file);
	          linea = archivoEntrada.readLine();//Leo la primera linea
	          tokenAnalizados=new ArrayList<Token>();
	          while (linea != null){//Hago esto para recorrer todas las lineas del archivo
	        	    columna=0;//La inicializo otra vez por que cambia de renglon
	                tokenizer = new StringTokenizer(linea);//Utilizo para partir el renglon que ya tengo
	                int cont=tokenizer.countTokens();//Cuento las palabras que analizare
	                for(int i=0; i<cont; i++) {//Recorro las columnas
	                columna++;//Para checar en que columna se produce el error
	                aux = tokenizer.nextToken();//Extraigo la palabra
	                checarToken(aux);
	                }
	                linea=archivoEntrada.readLine();//Leo las lineas siguientes
	                renglon++;
	          }
	          archivoEntrada.close();
		}catch(IOException e) {
			JOptionPane.showMessageDialog(null,"No se encontro el archivo favor de checar la ruta","Alerta",JOptionPane.ERROR_MESSAGE);//Mando un mensaje por si no encuentro el archivo
		}
		for(int i=0; i<tokenAnalizados.size(); i++)
			System.out.println(tokenAnalizados.get(i).toString());//Imprimo todo el analisis
	}
	public void checarToken(String token) {
		//Hice un metodo para analizar cada uno
		if(esModificador(token))
			return;
		if(esPalabraReservada(token))
			return;
		if(esTipoDato(token))
			return;
		if(esSimbolo(token))
			return;
		if(esOperadorLogico(token))
			return;
		if(esOperadorAritmetico(token))
			return;
		Pattern pat = Pattern.compile("[a-zA-Z0-9]");//Utilizo esta expresion para validar los identificadores
		Matcher mat = pat.matcher(token);
		if(mat.find()) {//Si la expresion cumple con las reglas del identificador
			tokenAnalizados.add(new Token("Identificador",token));//Guardo el token analizado
		}else {
			System.out.println("Error token no valido: Renglon "+renglon+" Columna "+columna+" token "+token);//Mando un error de token en que renglon fue ocasionado y columna
		}
	}
	public boolean esModificador(String token) {
		if(token.equals("public")||token.equals("private")||token.equals("protected")) {
			tokenAnalizados.add(new Token("Modificador",token));//Guardo el token analizado
			return true;
		}else 
			return false;
	}
	public boolean esPalabraReservada(String token) {
		if(token.equals("class")||token.equals("if")||token.equals("void")||token.equals("else")||token.equals("protected")||token.equals("for")||token.equals("while")) {
			tokenAnalizados.add(new Token("Palabra Reservada",token));//Guardo el token analizado
			return true;
		}else 
			return false;
	}
	public boolean esTipoDato(String token) {
		if(token.equals("int")||token.equals("double")||token.equals("String")||token.equals("boolean")||token.equals("float")||token.equals("long")) {
			tokenAnalizados.add(new Token("Tipo de datos",token));//Guardo el token analizado
			return true;
		}else
			return false;
	}
	public boolean esSimbolo(String token) {
		if(token.equals("(")||token.equals(")")||token.equals("{")||token.equals("}")||token.equals(";")||token.equals("=")) {
			tokenAnalizados.add(new Token("Simbolo",token));//Guardo el token analizado
			return true;
		}else
			return false;
	}
	public boolean esOperadorLogico(String token) {
		if(token.equals("<")||token.equals("<=")||token.equals(">=")||token.equals("==")||token.equals("!")) {
			tokenAnalizados.add(new Token("Operador Logico",token));//Guardo el token analizado
			return true;
		}else
			return false;
	}
	public boolean esOperadorAritmetico(String token) {
		if(token.equals("+")||token.equals("-")||token.equals("*")||token.equals("/")) {
			tokenAnalizados.add(new Token("Operador Aritmetico",token));//Guardo el token analizado
			return true;
		}else
			return false;
	}
}
